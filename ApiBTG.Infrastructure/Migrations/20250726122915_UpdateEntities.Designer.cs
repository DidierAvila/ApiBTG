// <auto-generated />
using System;
using ApiBTG.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiBTG.Infrastructure.Migrations
{
    [DbContext(typeof(BGTDbContext))]
    [Migration("20250726122915_UpdateEntities")]
    partial class UpdateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiBTG.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Disponibilidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoMinimo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdSucursal", "IdProducto")
                        .IsUnique();

                    b.ToTable("Disponibilidad");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Inscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdDisponibilidad")
                        .HasColumnType("int");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDisponibilidad");

                    b.HasIndex("ProductoId");

                    b.HasIndex("IdCliente", "IdDisponibilidad")
                        .IsUnique();

                    b.ToTable("Inscripcion");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TipoProducto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Sucursal");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdToken");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaVencimiento");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("IdUsuario");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Estado");

                    b.Property<string>("TokenValue")
                        .HasColumnType("Varchar (MAX)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdUsuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("Varchar (100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("Varchar (255)")
                        .HasColumnName("Nombre");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("Varchar (255)")
                        .HasColumnName("Apellido");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("Varchar (20)")
                        .HasColumnName("Clave");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("Varchar (255)")
                        .HasColumnName("Rol");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Visita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaVisita")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdSucursal")
                        .HasColumnType("int");

                    b.Property<string>("TipoAccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdSucursal");

                    b.ToTable("Visita");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Disponibilidad", b =>
                {
                    b.HasOne("ApiBTG.Domain.Entities.Producto", "Producto")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiBTG.Domain.Entities.Sucursal", "Sucursal")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("IdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Inscripcion", b =>
                {
                    b.HasOne("ApiBTG.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Inscripciones")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiBTG.Domain.Entities.Disponibilidad", "Disponibilidad")
                        .WithMany()
                        .HasForeignKey("IdDisponibilidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiBTG.Domain.Entities.Producto", null)
                        .WithMany("Inscripciones")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Cliente");

                    b.Navigation("Disponibilidad");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Visita", b =>
                {
                    b.HasOne("ApiBTG.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Visitas")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiBTG.Domain.Entities.Sucursal", "Sucursal")
                        .WithMany("Visitas")
                        .HasForeignKey("IdSucursal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Sucursal");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Inscripciones");

                    b.Navigation("Visitas");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Producto", b =>
                {
                    b.Navigation("Disponibilidades");

                    b.Navigation("Inscripciones");
                });

            modelBuilder.Entity("ApiBTG.Domain.Entities.Sucursal", b =>
                {
                    b.Navigation("Disponibilidades");

                    b.Navigation("Visitas");
                });
#pragma warning restore 612, 618
        }
    }
}
